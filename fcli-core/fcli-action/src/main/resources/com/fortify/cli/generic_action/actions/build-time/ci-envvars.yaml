# yaml-language-server: $schema=https://fortify.github.io/fcli/schemas/action/fcli-action-schema-dev-2.x.json

author: Fortify
usage:
  header: Generate CI env vars documentation
  description: |
    TODO

config:
  output: immediate
  
cli.options:
  outputDir:
    names: "-d"
    description: Required output directory
  
steps:
  - var.set:
      fod: {fmt: fod}
      ssc: {fmt: ssc}
  - records.for-each:
      from: ${{'fod.all', 'fod.ci', 'ssc.all', 'ssc.ci'}} 
      record.var-name: type
      do:
      - var.set:
          includeSessionEnvVars: ${type.endsWith('.all')}
          sessionEnvVars: ${type.startsWith('fod')?fod.session:ssc.session}
          ciEnvVars: ${type.startsWith('fod')?fod.ci:ssc.ci}
          commonEnvVarProperties: ${type.startsWith('fod')?fod.commonEnvVarProperties:ssc.commonEnvVarProperties}
          common: {fmt: common}
      - with:
          writers:
            table:
              to: ${cli.outputDir}/ci-envvars-${type}.txt
              type: table
              type-args: names:Environment variable,desc:Description
              style: border
          do:
            # Append FoD/SSC-specific session env vars if these need to be included
          - if: ${includeSessionEnvVars}
            records.for-each:
              from: ${sessionEnvVars}
              record.var-name: envVar 
              do:
              - writer.append:
                  table: ${envVar}
            # Append other ci env vars. We may need to split ciEnvVars and commonEnvVars
            # to allow for intermingling SSC/FoD-specific and common env vars to build
            # a table in logical order.
          - records.for-each:
              from: ${{ciEnvVars, common.ci}} 
              record.var-name: envVars
              do:
              - records.for-each:
                  from: ${envVars}
                  record.var-name: envVar 
                  do:
                    - writer.append:
                        table: ${envVar.realNode} # TODO This should be fixed in action framework
      
formatters:
  fod:
    commonEnvVarProperties:
      setupAction: setup-release 
    session:
      - names: FOD_URL
        desc: >-  
          Fortify on Demand URL, for example https://ams.fortify.com. This must be rendered by the CI/CD system
          as plain text, not as a masked secret/variable.
      - names: FOD_CLIENT_ID\nFOD_CLIENT_SECRET
        desc: >-
          Required when authenticating with an API key: Fortify on Demand Client ID (API key) and Secret (API secret).
      - names: FOD_TENANT\nFOD_USER\nFOD_PASSWORD
        desc: >-
          Required when authenticating with user credentials: Fortify on Demand tenant, user and password. It is
          recommended to use a Personal Access Token instead of an actual user password.
      - names: FOD_LOGIN_EXTRA_OPTS
        desc: >-
          Extra login options, for example for disabling SSL checks or changing connection time-outs; see 
          'fcli fod session login' documentation.
    ci:
      - names: FOD_RELEASE
        desc: >-
          Fortify on Demand release to use with this action. This should be specified as '<app-name>:<release-name>'
          (for non-microservices applications) or '<app-name>:<microservice-name>:<release-name>' (for microservices 
          applications). Default value is based on repository and branch name, for example myOrg/myRepo:myBranch.
          Note that you'll need to explicitly configure FOD_RELEASE for microservices applications, as the default
          value lacks a microservice name.
  ssc:
    commonEnvVarProperties:
      setupAction: setup-release 
    session:
      - names: SSC_URL
        desc: >-
            Software Security Center (SSC) URL, for example https://ssc.customer.fortifyhosted.net/. This must be 
            rendered by the CI/CD system as plain text, not as a masked secret/variable.
      - names: SSC_TOKEN
        desc: >-
            Required when authenticating with an SSC token (recommended). Most actions should work fine with a CIToken.
      - names: SSC_USER\nSSC_PASSWORD
        desc: >-
            Required when authenticating with SSC user credentials.
      - names: SC_SAST_TOKEN
        desc: >-
            ScanCentral SAST Client Authentication Token for authenticating with ScanCentral SAST Controller. This 
            environment variable is required when running a ScanCentral SAST scan.
      # TODO Add DEBRICKED_TOKEN once implemented
      - names: SSC_LOGIN_EXTRA_OPTS
        desc: >-
            Extra SSC login options, for example for disabling SSL checks or changing connection time-outs; 
            see 'fcli ssc session login' documentation.        
    ci:
      - names: SSC_APPVERSION
        desc: >-
            Fortify SSC application version to use with this action. This should be specified as '<app-name>:<version-name>'. 
            Default value is based on repository and branch name, for example myOrg/myRepo:myBranch.
  common:
    ci:
      - names: PACKAGE_ACTION\nPACKAGE_ACTION_EXTRA_OPTS
        desc: >- 
          By default, the fcli 'package' action is used to (optionally) package the source code to be scanned; see next
          entry for information on how to configure the packaging process. If the standard fcli 'package' action doesn't
          meet your needs, for example if you want to perform a local translation using Fortify Static Code Analyzer,
          you can use PACKAGE_ACTION to use a custom action for packaging, optionally providing extra options to this
          custom action through the PACKAGE_ACTION_EXTRA_OPTS environment variable. Note that any custom action must
          set the global.package.output action variable, pointing to the package or MBS file to be scanned.
      - names: USE_PACKAGE\nPACKAGE_EXTRA_OPTS\nSC_CLIENT_VERSION\nSOURCE_DIR\nDO_PACKAGE_DEBUG\nTOOL_DEFINITIONS
        desc: >-
          These environment variables define packaging behavior. If USE_PACKAGE is specified, packaging will be skipped
          and the given package or MBS file (which must already exist) will be used. To pass additional options to the
          'scancentral package' command like '-bt' or '-bf', use PACKAGE_EXTRA_OPTS.\nBy default:\n
          - Latest available ScanCentral Client version will be used for packaging; use SC_CLIENT_VERSION
          to specify a different version.\n
          - Current working directory will be packaged; use SOURCE_DIR to package a different directory.\n
          - Debug logging for Scancentral Client is disabled; set DO_PACKAGE_DEBUG to true to enable debug logging.\n
          - Tool definitions to identify available ScanCentral Client versions will be downloaded from the default
          location; use TOOL_DEFINITIONS to use customized tool definitions.\n
      